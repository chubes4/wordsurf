# Wordsurf Project Architecture

## Overview

Wordsurf is an agentic WordPress plugin that integrates AI agents directly into the WordPress editor. The plugin provides a chat interface where users can interact with an AI assistant that has access to WordPress content through a modular tool system.

## Core Architecture

### Agent System
- **Agent Core** (`Wordsurf_Agent_Core`): Orchestrates the AI agent's decision-making and tool execution
- **Chat Handler** (`Wordsurf_Chat_Handler`): Manages WordPress hooks and routes chat requests to the agent
- **Response Stream Parser** (`Wordsurf_Response_Stream_Parser`): Parses OpenAI streaming responses and extracts tool calls
- **Tool Manager** (`Wordsurf_Tool_Manager`): Manages tool registration and execution
- **Context Manager** (`Wordsurf_Context_Manager`): Provides post context and site information to the agent
- **System Prompt** (`Wordsurf_System_Prompt`): Builds the system prompt with context and tool descriptions

### API Layer
- **OpenAI Client** (`Wordsurf_OpenAI_Client`): Pure HTTP client for OpenAI API communication
- **REST API Handler** (`Wordsurf_REST_API`): Handles WordPress REST API endpoints
- **Chat Handler** (`Wordsurf_Chat_Handler`): Direct streaming endpoint that bypasses REST API framework

### Frontend
- **WordsurfChatStream** (`src/js/editor/WordsurfChatStream.js`): Main chat interface component
- **InlineDiffHighlight** (`src/js/editor/InlineDiffHighlight.js`): Simplified orchestrator for diff highlighting using modular tool system
- **Modular Diff System** (`src/js/editor/diff/`): Extensible architecture for diff functionality
  - **BaseDiffHighlight** (`diff/BaseDiffHighlight.js`): Shared functionality for all diff types (buttons, cleanup, utilities)
  - **EditPostDiff** (`diff/EditPostDiff.js`): WordPress-style word-level diff highlighting for edit_post tool
  - **InsertContentDiff** (`diff/InsertContentDiff.js`): Position-based insertion previews for insert_content tool
  - **WriteToPostDiff** (`diff/WriteToPostDiff.js`): Simple replacement highlighting for write_to_post tool
  - **DiffUtils** (`diff/DiffUtils.js`): Core diff algorithms (LCS, word-level diffs, tokenization)
  - **Tool Registry** (`diff/index.js`): Factory pattern for creating appropriate diff handlers
- **ToolCall** (`src/js/editor/ToolCall.js`): Displays tool execution status and results  
- **Chat Stream API** (`src/js/editor/chatStreamApi.js`): Handles communication with the backend

## Tool System Architecture

### Tool Granularity Strategy

The plugin implements a two-tier tool system based on context scope:

#### Post-Level Context (Current Focus)
Tools that operate within the context of a single post being edited:

1. **read_post** ‚úÖ (Implemented)
   - Reads and analyzes WordPress post content
   - Provides comprehensive post information including title, content, excerpt, metadata, and statistics
   - File: `includes/agent/core/tools/read_post.php`

2. **edit_post** ‚úÖ (Implemented with Editor Overlay)
   - Regex-based search and replace functionality with real-time preview
   - Allows precise, surgical edits to post content
   - Examples: fix typos, modify single sentences, add content to specific paragraphs
   - Supports content, title, and excerpt editing
   - **Editor Overlay Mode**: Shows inline diff directly in editor content area
   - **Contextual Placement**: Diff appears where changes will be made, not in sidebar
   - **Direct Editor Integration**: Applies changes to Gutenberg editor state when accepted
   - **Cursor-Style UX**: Modern inline suggestion interface with accept/reject buttons
   - **Visual Diff**: Professional highlighting of additions/deletions with ‚Üí indicators
   - Files: 
     - `includes/agent/core/tools/edit_post.php` (backend tool)
     - `src/js/editor/InlineDiffHighlight.js` (inline diff highlighting component)
     - `assets/css/editor/inline-diff-highlight.css` (inline diff styling)

3. **insert_content** ‚úÖ (Implemented with Editor Overlay)
   - Adds new content to posts without modifying existing content
   - Three insertion modes: beginning, end, after_paragraph
   - Automatically formats content as WordPress blocks
   - **Editor Overlay Mode**: Shows inline highlights with blue dashed borders
   - **Visual Distinction**: Different styling from edit_post to indicate insertion vs replacement
   - File: `includes/agent/core/tools/insert_content.php`

4. **write_to_post** ‚úÖ (Implemented with Full Preview)
   - Replaces entire post content with new content from scratch
   - Complete content replacement with optional title and excerpt updates
   - Automatic WordPress block formatting
   - **Full Preview Mode**: Shows modal overlay with complete new content preview
   - **Statistics Display**: Shows word count changes, paragraph differences
   - **Before/After Comparison**: Comprehensive preview of all changes
   - **Content Statistics**: Detailed analytics on content transformation
   - File: `includes/agent/core/tools/write_to_post.php`

#### Site-Level Context (Future Implementation)
Tools that operate across multiple posts and site-wide operations:
- Analyze multiple posts
- Cross-post content operations
- Site-wide content strategy
- Taxonomy management
- Media handling

### Tool Implementation Pattern

All tools follow the `Wordsurf_BaseTool` interface:

```php
interface Wordsurf_BaseTool {
    public function get_name(): string;
    public function get_description(): string;
    public function get_schema(): array;
    public function execute(array $parameters): array;
}
```

### Tool Registration

Tools are registered in `Wordsurf_Tool_Manager` and automatically included in the OpenAI function calling schema. The agent can dynamically discover and use available tools based on the user's request.

## Modular Diff Architecture

### Tool-Specific Diff System

The plugin implements a **modular, extensible diff system** where each tool type has its own dedicated diff handler with tool-specific logic:

#### Architecture Overview
```
InlineDiffHighlight (Orchestrator)
    ‚Üì
Tool Registry (Factory Pattern)
    ‚Üì
Tool-Specific Diff Handler
    ‚Üì
BaseDiffHighlight (Shared Functionality)
```

#### 1. Diff Handler Factory
- **Tool Registry** (`diff/index.js`) maps tool types to handler classes
- **Factory Function** `createDiffHandler()` instantiates appropriate handler
- **Error Handling** for unknown tool types with helpful error messages
- **Extensible** - add new tools without modifying existing code

#### 2. Tool-Specific Handlers

**EditPostDiff** (Word-level WordPress-style diffs):
- **Visual**: Light green background with darker green for changed words
- **Tooltip**: Red background showing original text with deletion markers
- **Algorithm**: LCS-based word diff with tokenization preserving punctuation
- **Acceptance**: Actually replaces text content in the editor DOM

**InsertContentDiff** (Position-based insertion previews):
- **Visual**: Dashed green border with insertion preview styling
- **Positioning**: Beginning, end, or after specific paragraphs
- **Algorithm**: TreeWalker to find insertion points in DOM
- **Acceptance**: Removes preview (backend handles actual insertion)

**WriteToPostDiff** (Simple replacement highlighting):
- **Visual**: Standard green highlighting with simple tooltips
- **Algorithm**: Direct text matching and replacement
- **Acceptance**: Default behavior (backend handles replacement)

#### 3. Shared Base Functionality
**BaseDiffHighlight** provides common features:
- **Action Buttons**: Accept (‚úì) and reject (‚úó) with tool-specific titles
- **Cleanup System**: Element tracking and DOM restoration
- **Text Finding**: TreeWalker utilities for DOM text search
- **Event Handling**: Standardized accept/reject callbacks

#### 4. Diff Utils & Algorithms
**DiffUtils** contains core algorithms:
- **Word Tokenization**: Preserves whitespace and punctuation
- **LCS Algorithm**: Longest Common Subsequence for accurate diffs
- **Merge Operations**: Combines consecutive operations
- **WordPress-style Tooltips**: Shows removed (red) and added (green) content

#### 5. CSS Architecture
- **Consistent Styling**: Light green background (#d4edda) for all diff blocks
- **Tool-Specific Elements**: Darker green (#28a745) for changed words
- **Tooltip System**: Red background (#f8d7da) for showing original content
- **Responsive Design**: Mobile-friendly buttons and positioning
- **Animation System**: Golden flash intro, smooth hover transitions

#### 6. Adding New Diff Tools
```javascript
// 1. Create new tool class extending BaseDiffHighlight
class NewToolDiff extends BaseDiffHighlight {
  constructor(diffData, editorDocument, onAccept, onReject) {
    super(diffData, editorDocument, onAccept, onReject);
    this.toolType = 'new_tool';
  }
  
  createHighlight() {
    // Tool-specific highlighting logic
  }
}

// 2. Register in tool registry
const TOOL_HANDLERS = {
  'edit_post': EditPostDiff,
  'insert_content': InsertContentDiff,
  'write_to_post': WriteToPostDiff,
  'new_tool': NewToolDiff,  // ‚Üê Just add this line!
};
```

**Benefits of this architecture**:
- üßπ **Clean Code**: Each tool is self-contained (~80-115 lines)
- üîå **Extensible**: Add tools without touching existing code
- üß™ **Testable**: Each tool can be unit tested independently
- üìö **Self-Documenting**: File names clearly indicate purpose
- üöÄ **Maintainable**: Zero conditionals in main component

## Data Flow

### Chat Request Flow
1. User sends message via frontend chat interface
2. `WordsurfChatStream` sends request to `Wordsurf_Chat_Handler`
3. Chat handler validates request and calls `Wordsurf_Agent_Core::handle_chat_request()`
4. Agent core builds system prompt with context and available tools
5. Agent core sends request to OpenAI via `Wordsurf_OpenAI_Client`
6. OpenAI responds with streaming data containing tool calls or text
7. `Wordsurf_Response_Stream_Parser` parses the stream and fires events
8. Tool calls are executed via `Wordsurf_Tool_Manager`
9. Results are sent back to OpenAI for final response
10. Final response is streamed back to the frontend

### Tool Execution Flow
1. Agent decides to use a tool based on user request
2. OpenAI returns function call with parameters
3. Parser extracts tool call and fires `onToolEnd` event
4. Agent core executes tool via `Wordsurf_Tool_Manager`
5. Tool result is stored for follow-up API call
6. Agent makes follow-up call with tool results
7. OpenAI generates final response incorporating tool results

## File Structure

```
wordsurf/
‚îú‚îÄ‚îÄ assets/                 # Compiled assets
‚îÇ   ‚îú‚îÄ‚îÄ css/               # Stylesheets
‚îÇ   ‚îî‚îÄ‚îÄ js/                # Compiled JavaScript
‚îú‚îÄ‚îÄ includes/              # PHP backend
‚îÇ   ‚îú‚îÄ‚îÄ admin/            # Admin interface
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ class-admin.php
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ class-settings.php
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ editor/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ class-editor-interface.php
‚îÇ   ‚îú‚îÄ‚îÄ agent/            # AI agent core
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ context/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ class-context-manager.php
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ core/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ class-agent-core.php
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ class-chat-handler.php
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ class-response-stream-parser.php
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ class-system-prompt.php
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ class-tool-manager.php
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tools/
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ basetool.php
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ read_post.php
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ edit_post.php
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ insert_content.php
‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ write_to_post.php
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tools/        # Tool implementations
‚îÇ   ‚îî‚îÄ‚îÄ api/              # API handlers
‚îÇ       ‚îú‚îÄ‚îÄ class-api-base.php
‚îÇ       ‚îú‚îÄ‚îÄ class-openai-client.php
‚îÇ       ‚îî‚îÄ‚îÄ class-rest-api.php
‚îú‚îÄ‚îÄ src/                   # Source files
‚îÇ   ‚îî‚îÄ‚îÄ js/               # JavaScript source
‚îÇ       ‚îú‚îÄ‚îÄ admin/
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îÇ       ‚îî‚îÄ‚îÄ editor/
‚îÇ           ‚îú‚îÄ‚îÄ index.js              # WordPress plugin entry
‚îÇ           ‚îú‚îÄ‚îÄ WordsurfChatStream.js # Chat interface component
‚îÇ           ‚îú‚îÄ‚îÄ InlineDiffHighlight.js # Diff orchestrator (simplified)
‚îÇ           ‚îú‚îÄ‚îÄ ToolCall.js          # Tool execution status
‚îÇ           ‚îú‚îÄ‚îÄ chatStreamApi.js     # Backend communication
‚îÇ           ‚îî‚îÄ‚îÄ diff/                # Modular diff system
‚îÇ               ‚îú‚îÄ‚îÄ BaseDiffHighlight.js    # Shared diff functionality
‚îÇ               ‚îú‚îÄ‚îÄ EditPostDiff.js         # Word-level diffs
‚îÇ               ‚îú‚îÄ‚îÄ InsertContentDiff.js    # Insertion previews
‚îÇ               ‚îú‚îÄ‚îÄ WriteToPostDiff.js      # Simple replacements
‚îÇ               ‚îú‚îÄ‚îÄ DiffUtils.js            # Core diff algorithms
‚îÇ               ‚îî‚îÄ‚îÄ index.js                # Tool registry & factory
‚îÇ           ‚îú‚îÄ‚îÄ index.js
‚îÇ           ‚îú‚îÄ‚îÄ ToolCall.js
‚îÇ           ‚îî‚îÄ‚îÄ WordsurfChatStream.js
‚îú‚îÄ‚îÄ wordsurf.php          # Main plugin file
‚îú‚îÄ‚îÄ package.json          # Node.js dependencies
‚îî‚îÄ‚îÄ webpack.config.js     # Build configuration
```

## Key Components

### Wordsurf_Agent_Core
- Manages the agent's conversation state
- Orchestrates tool execution
- Handles streaming responses
- Coordinates follow-up API calls after tool execution

### Wordsurf_Response_Stream_Parser
- Parses OpenAI streaming responses
- Extracts tool calls and text deltas
- Fires events for tool execution and text display
- Handles the complex event structure of OpenAI's streaming API

### Wordsurf_Tool_Manager
- Registers and manages available tools
- Executes tools with proper error handling
- Provides tool schemas for OpenAI function calling
- Maintains tool descriptions and metadata

### Wordsurf_Context_Manager
- Provides post context to the agent
- Includes post metadata, categories, tags
- Supplies site information and user context
- Manages context window for large posts

## Security Considerations

- All requests are validated with WordPress nonces
- User capabilities are checked before tool execution
- Input sanitization is applied to all user inputs
- Tool execution is isolated and error-handled
- API keys are stored securely in WordPress options

## Performance Considerations

- Streaming responses provide real-time feedback
- Tool execution is optimized for WordPress database queries
- Context management prevents token limit issues
- Caching can be implemented for frequently accessed data

## Extensibility

The plugin is designed for easy extension:

1. **New Tools**: Create new tool classes extending `Wordsurf_BaseTool`
2. **New Context**: Extend `Wordsurf_Context_Manager` for additional context
3. **New UI Components**: Add new React components to the frontend
4. **New API Endpoints**: Extend the REST API for additional functionality

## Current Status

- ‚úÖ Basic agent architecture implemented
- ‚úÖ Streaming chat interface working
- ‚úÖ Tool system framework established
- ‚úÖ read_post tool implemented and working
- ‚úÖ edit_post tool implemented and working with inline diff preview
- ‚úÖ insert_content tool implemented and working with insertion highlighting
- ‚úÖ write_to_post tool implemented and working with full content preview
- üìã Site-level tools planned for future admin interface
